---
- name: Tomcat 9
  hosts: appservers
  become: yes
  tasks:
    - name: fail on unsupported versions
      fail:
        msg: This playbook supports only centos and ubuntu distributions 
      when: 
        - ansible_facts['distribution'] != "Ubuntu"
        - ansible_facts['distribution'] != "CentOS" 
    - name: update packages and install java
      apt:
        name: "{{ java_package }}"
        update_cache: yes
        state: present
      when: ansible_facts['distribution'] == "Ubuntu"
    - name: install java for centos instances
      yum:
        name: "{{ java_package }}"
        state: present
      when: ansible_facts['distribution'] == "CentOS"
    - name: check if latest tomcat is present
      stat:
        path: "{{tomcat_home}}/latest"
      register: tomcat_latest_dir
    - name: Download tomcat
      get_url:
        url: "https://archive.apache.org/dist/tomcat/tomcat-9/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "/tmp/apache-tomcat-{{tomcat_version}}.tar.gz"
      when: not tomcat_latest_dir.stat.exists
    - name: Untar tomcat tar
      unarchive:
        src: "/tmp/apache-tomcat-{{tomcat_version}}.tar.gz"
        dest: "{{tomcat_home}}"
        remote_src: yes
      when: not tomcat_latest_dir.stat.exists
    - name: create link
      file:
        src: "{{tomcat_home}}/apache-tomcat-{{tomcat_version}}"
        dest: "{{tomcat_home}}/latest"
        state: link
      when: not tomcat_latest_dir.stat.exists
    - name: give ownership to tomcat user and group
      ansible.builtin.file:
        path: "{{ tomcat_home }}"
        state: directory
        recurse: yes
        owner: "{{ user }}"
        group: "{{ user }}"
      when: not tomcat_latest_dir.stat.exists
    - name: finding shellfiles
      find:
        paths: "{{tomcat_home}}/latest/bin/"
        patterns: "*.sh"
      register: shellfiles
      when: not tomcat_latest_dir.stat.exists
    - set_fact:
        tomcat_executables: "{{ shellfiles.files | map(attribute='path') | list }}"
      when: not tomcat_latest_dir.stat.exists
    - name: giving execute permissions
      file:
        path: "{{items}}"
        mode: 0751
      with_items: "{{ tomcat_executables }}"
      when: not tomcat_latest_dir.stat.exists
    - name: tomcat service file
      copy:
        src: "{{service_file}}"
        dest: "{{sevice_dest}}"
      notify:
        - reload and enable tomcat
    - name: ensure tomcat is running
      ansible.builtin.systemd:
        name: tomcat.service
        state: started
    - name: copy tomcat users file
      ansible.builtin.copy:
        src: tomcat-users.xml
        dest: "{{ tomcat_users_config_location }}"
    - name: copy tomcat manager config
      ansible.builtin.copy:
        src: manager-context.xml
        dest: "{{ tomcat_manager_config_location }}"
    - name: copy tomcat host manager config
      ansible.builtin.copy:
        src: host-context.xml
        dest: "{{ tomcat_host_manager_config_location }}"
      notify: 
        - reload and enable tomcat
  handlers:
    - name: reload and enable tomcat
      ansible.builtin.systemd:
        name: tomcat.service
        daemon_reload: yes
        enabled: yes
        state: restarted 
      